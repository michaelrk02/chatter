// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chatter.proto

package chatter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientInfo struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	JoinTimestamp        int64    `protobuf:"varint,2,opt,name=join_timestamp,json=joinTimestamp,proto3" json:"join_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba0d1307119797e, []int{0}
}

func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientInfo.Unmarshal(m, b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
}
func (m *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(m, src)
}
func (m *ClientInfo) XXX_Size() int {
	return xxx_messageInfo_ClientInfo.Size(m)
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *ClientInfo) GetJoinTimestamp() int64 {
	if m != nil {
		return m.JoinTimestamp
	}
	return 0
}

type MessageDescriptor struct {
	ClientId             uint32   `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Contents             string   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageDescriptor) Reset()         { *m = MessageDescriptor{} }
func (m *MessageDescriptor) String() string { return proto.CompactTextString(m) }
func (*MessageDescriptor) ProtoMessage()    {}
func (*MessageDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba0d1307119797e, []int{1}
}

func (m *MessageDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageDescriptor.Unmarshal(m, b)
}
func (m *MessageDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageDescriptor.Marshal(b, m, deterministic)
}
func (m *MessageDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageDescriptor.Merge(m, src)
}
func (m *MessageDescriptor) XXX_Size() int {
	return xxx_messageInfo_MessageDescriptor.Size(m)
}
func (m *MessageDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MessageDescriptor proto.InternalMessageInfo

func (m *MessageDescriptor) GetClientId() uint32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *MessageDescriptor) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

type ClientConnectionEvent struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientConnectionEvent) Reset()         { *m = ClientConnectionEvent{} }
func (m *ClientConnectionEvent) String() string { return proto.CompactTextString(m) }
func (*ClientConnectionEvent) ProtoMessage()    {}
func (*ClientConnectionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba0d1307119797e, []int{2}
}

func (m *ClientConnectionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientConnectionEvent.Unmarshal(m, b)
}
func (m *ClientConnectionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientConnectionEvent.Marshal(b, m, deterministic)
}
func (m *ClientConnectionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConnectionEvent.Merge(m, src)
}
func (m *ClientConnectionEvent) XXX_Size() int {
	return xxx_messageInfo_ClientConnectionEvent.Size(m)
}
func (m *ClientConnectionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConnectionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConnectionEvent proto.InternalMessageInfo

func (m *ClientConnectionEvent) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *ClientConnectionEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ClientMessageEvent struct {
	Nickname             string   `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Contents             string   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessageEvent) Reset()         { *m = ClientMessageEvent{} }
func (m *ClientMessageEvent) String() string { return proto.CompactTextString(m) }
func (*ClientMessageEvent) ProtoMessage()    {}
func (*ClientMessageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba0d1307119797e, []int{3}
}

func (m *ClientMessageEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessageEvent.Unmarshal(m, b)
}
func (m *ClientMessageEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessageEvent.Marshal(b, m, deterministic)
}
func (m *ClientMessageEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessageEvent.Merge(m, src)
}
func (m *ClientMessageEvent) XXX_Size() int {
	return xxx_messageInfo_ClientMessageEvent.Size(m)
}
func (m *ClientMessageEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessageEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessageEvent proto.InternalMessageInfo

func (m *ClientMessageEvent) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *ClientMessageEvent) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

func (m *ClientMessageEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ServerMessageEvent struct {
	Contents             string   `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerMessageEvent) Reset()         { *m = ServerMessageEvent{} }
func (m *ServerMessageEvent) String() string { return proto.CompactTextString(m) }
func (*ServerMessageEvent) ProtoMessage()    {}
func (*ServerMessageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ba0d1307119797e, []int{4}
}

func (m *ServerMessageEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerMessageEvent.Unmarshal(m, b)
}
func (m *ServerMessageEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerMessageEvent.Marshal(b, m, deterministic)
}
func (m *ServerMessageEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMessageEvent.Merge(m, src)
}
func (m *ServerMessageEvent) XXX_Size() int {
	return xxx_messageInfo_ServerMessageEvent.Size(m)
}
func (m *ServerMessageEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMessageEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMessageEvent proto.InternalMessageInfo

func (m *ServerMessageEvent) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

func (m *ServerMessageEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*ClientInfo)(nil), "chatter.ClientInfo")
	proto.RegisterType((*MessageDescriptor)(nil), "chatter.MessageDescriptor")
	proto.RegisterType((*ClientConnectionEvent)(nil), "chatter.ClientConnectionEvent")
	proto.RegisterType((*ClientMessageEvent)(nil), "chatter.ClientMessageEvent")
	proto.RegisterType((*ServerMessageEvent)(nil), "chatter.ServerMessageEvent")
}

func init() { proto.RegisterFile("chatter.proto", fileDescriptor_3ba0d1307119797e) }

var fileDescriptor_3ba0d1307119797e = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x51, 0x4b, 0x1b, 0x41,
	0x10, 0xc7, 0x73, 0x11, 0x9a, 0x64, 0x20, 0x85, 0xae, 0x54, 0xe4, 0x22, 0x22, 0x07, 0x85, 0x3c,
	0x9d, 0x25, 0x3e, 0x97, 0x3e, 0x24, 0x22, 0x01, 0x6d, 0x69, 0xb4, 0x2d, 0xf4, 0x45, 0xd6, 0x73,
	0x4c, 0xd7, 0x26, 0xb3, 0xc7, 0xee, 0x68, 0xe9, 0x97, 0xed, 0x67, 0xe8, 0x47, 0x28, 0xd9, 0xbd,
	0xc4, 0xdc, 0x1e, 0x5e, 0x82, 0x8f, 0x3b, 0xb3, 0xfb, 0x9b, 0xff, 0xcd, 0xff, 0x7f, 0xd0, 0xcd,
	0x7e, 0x4a, 0x66, 0x34, 0x69, 0x6e, 0x34, 0x6b, 0xd1, 0x2a, 0x8e, 0x71, 0x6f, 0xaa, 0xf5, 0x74,
	0x86, 0xc7, 0xae, 0x7c, 0xf3, 0x70, 0x77, 0x8c, 0xf3, 0x9c, 0xff, 0xf8, 0x5b, 0xf1, 0x61, 0xd8,
	0xfc, 0x6d, 0x64, 0x9e, 0xa3, 0xb1, 0xbe, 0x9f, 0x7c, 0x06, 0x18, 0xce, 0x14, 0x12, 0x8f, 0xe9,
	0x4e, 0x8b, 0x18, 0xda, 0xa4, 0xb2, 0x5f, 0x24, 0xe7, 0xb8, 0x1f, 0x1d, 0x45, 0xfd, 0xce, 0x64,
	0x75, 0x16, 0xef, 0xe0, 0xf5, 0xbd, 0x56, 0x74, 0xcd, 0x6a, 0x8e, 0x96, 0xe5, 0x3c, 0xdf, 0x6f,
	0x1e, 0x45, 0xfd, 0x9d, 0x49, 0x77, 0x51, 0xbd, 0x5a, 0x16, 0x93, 0x73, 0x78, 0x73, 0x81, 0xd6,
	0xca, 0x29, 0x8e, 0xd0, 0x66, 0x46, 0xe5, 0xac, 0x8d, 0xe8, 0x41, 0x27, 0x73, 0x53, 0xae, 0xd5,
	0xad, 0x03, 0x77, 0x27, 0x6d, 0x5f, 0x18, 0xdf, 0x2e, 0x86, 0x66, 0x9a, 0x18, 0x89, 0xad, 0x43,
	0x76, 0x26, 0xab, 0x73, 0xf2, 0x05, 0xde, 0x7a, 0x79, 0x43, 0x4d, 0x84, 0x19, 0x2b, 0x4d, 0xa7,
	0x8f, 0x48, 0x5c, 0xab, 0xf4, 0x00, 0x3a, 0xa1, 0xc8, 0xa7, 0x42, 0x72, 0x0f, 0xc2, 0x23, 0x0b,
	0x99, 0x9b, 0x79, 0x35, 0x02, 0xcb, 0xb3, 0x76, 0xc2, 0x59, 0x9f, 0x40, 0x5c, 0xa2, 0x79, 0x44,
	0x13, 0xce, 0x5a, 0xf1, 0xa2, 0x3a, 0x5e, 0xa8, 0x7d, 0xf0, 0xb7, 0x09, 0xad, 0xa1, 0xb7, 0x5d,
	0x7c, 0x00, 0x38, 0x43, 0xf6, 0x9f, 0x62, 0xc5, 0x5e, 0xea, 0x8d, 0x4e, 0x97, 0x46, 0xa7, 0xa7,
	0x8b, 0x14, 0xc4, 0xbb, 0xe9, 0x32, 0x35, 0x4f, 0x36, 0x27, 0x8d, 0xf7, 0x91, 0x38, 0x83, 0x56,
	0xb1, 0x53, 0x71, 0x50, 0x79, 0x7b, 0xc9, 0x46, 0xd1, 0xf4, 0x9b, 0x9c, 0x3d, 0x60, 0x5c, 0xed,
	0x7e, 0x1d, 0x13, 0x9f, 0x0c, 0x5c, 0x37, 0x69, 0x88, 0x11, 0xc0, 0x48, 0xd9, 0xec, 0x59, 0xd6,
	0xda, 0xed, 0xf8, 0x19, 0x95, 0x49, 0x43, 0x7c, 0x84, 0x56, 0xb1, 0x23, 0x11, 0xaf, 0x24, 0x57,
	0x82, 0x54, 0x03, 0x18, 0x41, 0xfb, 0x42, 0x2a, 0x62, 0xa9, 0xe8, 0xa5, 0x22, 0xfa, 0xd1, 0xe0,
	0x5f, 0x13, 0xba, 0xc5, 0x82, 0x9d, 0x57, 0x56, 0x7c, 0x87, 0xdd, 0x73, 0x65, 0x19, 0xa9, 0x94,
	0xc3, 0x0d, 0x23, 0x0e, 0x83, 0xad, 0x07, 0xe9, 0x75, 0x06, 0xfc, 0x80, 0xbd, 0x75, 0xf0, 0xd6,
	0x3b, 0xdc, 0x86, 0x7d, 0x55, 0x16, 0xbd, 0xdc, 0x6c, 0x3d, 0xb8, 0x17, 0x80, 0xd7, 0x33, 0x5b,
	0xa6, 0x96, 0x32, 0xbd, 0x35, 0xb5, 0xfa, 0x27, 0x2c, 0xa8, 0x37, 0xaf, 0xdc, 0xb3, 0x93, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x83, 0x25, 0x5e, 0xdf, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatterClient is the client API for Chatter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatterClient interface {
	GetClients(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Chatter_GetClientsClient, error)
	Connect(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.UInt32Value, error)
	Disconnect(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (*empty.Empty, error)
	Message(ctx context.Context, in *MessageDescriptor, opts ...grpc.CallOption) (*empty.Empty, error)
	Maintain(ctx context.Context, opts ...grpc.CallOption) (Chatter_MaintainClient, error)
}

type chatterClient struct {
	cc *grpc.ClientConn
}

func NewChatterClient(cc *grpc.ClientConn) ChatterClient {
	return &chatterClient{cc}
}

func (c *chatterClient) GetClients(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Chatter_GetClientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chatter_serviceDesc.Streams[0], "/chatter.Chatter/GetClients", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterGetClientsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chatter_GetClientsClient interface {
	Recv() (*ClientInfo, error)
	grpc.ClientStream
}

type chatterGetClientsClient struct {
	grpc.ClientStream
}

func (x *chatterGetClientsClient) Recv() (*ClientInfo, error) {
	m := new(ClientInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatterClient) Connect(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.UInt32Value, error) {
	out := new(wrappers.UInt32Value)
	err := c.cc.Invoke(ctx, "/chatter.Chatter/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatterClient) Disconnect(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chatter.Chatter/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatterClient) Message(ctx context.Context, in *MessageDescriptor, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chatter.Chatter/Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatterClient) Maintain(ctx context.Context, opts ...grpc.CallOption) (Chatter_MaintainClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chatter_serviceDesc.Streams[1], "/chatter.Chatter/Maintain", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterMaintainClient{stream}
	return x, nil
}

type Chatter_MaintainClient interface {
	Send(*wrappers.UInt32Value) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type chatterMaintainClient struct {
	grpc.ClientStream
}

func (x *chatterMaintainClient) Send(m *wrappers.UInt32Value) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatterMaintainClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatterServer is the server API for Chatter service.
type ChatterServer interface {
	GetClients(*empty.Empty, Chatter_GetClientsServer) error
	Connect(context.Context, *wrappers.StringValue) (*wrappers.UInt32Value, error)
	Disconnect(context.Context, *wrappers.UInt32Value) (*empty.Empty, error)
	Message(context.Context, *MessageDescriptor) (*empty.Empty, error)
	Maintain(Chatter_MaintainServer) error
}

// UnimplementedChatterServer can be embedded to have forward compatible implementations.
type UnimplementedChatterServer struct {
}

func (*UnimplementedChatterServer) GetClients(req *empty.Empty, srv Chatter_GetClientsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (*UnimplementedChatterServer) Connect(ctx context.Context, req *wrappers.StringValue) (*wrappers.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedChatterServer) Disconnect(ctx context.Context, req *wrappers.UInt32Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedChatterServer) Message(ctx context.Context, req *MessageDescriptor) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (*UnimplementedChatterServer) Maintain(srv Chatter_MaintainServer) error {
	return status.Errorf(codes.Unimplemented, "method Maintain not implemented")
}

func RegisterChatterServer(s *grpc.Server, srv ChatterServer) {
	s.RegisterService(&_Chatter_serviceDesc, srv)
}

func _Chatter_GetClients_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatterServer).GetClients(m, &chatterGetClientsServer{stream})
}

type Chatter_GetClientsServer interface {
	Send(*ClientInfo) error
	grpc.ServerStream
}

type chatterGetClientsServer struct {
	grpc.ServerStream
}

func (x *chatterGetClientsServer) Send(m *ClientInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Chatter_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatter.Chatter/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).Connect(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatter_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatter.Chatter/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).Disconnect(ctx, req.(*wrappers.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatter_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatterServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatter.Chatter/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatterServer).Message(ctx, req.(*MessageDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatter_Maintain_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatterServer).Maintain(&chatterMaintainServer{stream})
}

type Chatter_MaintainServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*wrappers.UInt32Value, error)
	grpc.ServerStream
}

type chatterMaintainServer struct {
	grpc.ServerStream
}

func (x *chatterMaintainServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatterMaintainServer) Recv() (*wrappers.UInt32Value, error) {
	m := new(wrappers.UInt32Value)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chatter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatter.Chatter",
	HandlerType: (*ChatterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Chatter_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Chatter_Disconnect_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _Chatter_Message_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClients",
			Handler:       _Chatter_GetClients_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Maintain",
			Handler:       _Chatter_Maintain_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "chatter.proto",
}

// ChatterEventsClient is the client API for ChatterEvents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatterEventsClient interface {
	ListenClientConnect(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (ChatterEvents_ListenClientConnectClient, error)
	ListenClientDisconnect(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (ChatterEvents_ListenClientDisconnectClient, error)
	ListenClientMessage(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (ChatterEvents_ListenClientMessageClient, error)
	ListenServerMessage(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (ChatterEvents_ListenServerMessageClient, error)
}

type chatterEventsClient struct {
	cc *grpc.ClientConn
}

func NewChatterEventsClient(cc *grpc.ClientConn) ChatterEventsClient {
	return &chatterEventsClient{cc}
}

func (c *chatterEventsClient) ListenClientConnect(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (ChatterEvents_ListenClientConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatterEvents_serviceDesc.Streams[0], "/chatter.ChatterEvents/ListenClientConnect", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterEventsListenClientConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatterEvents_ListenClientConnectClient interface {
	Recv() (*ClientConnectionEvent, error)
	grpc.ClientStream
}

type chatterEventsListenClientConnectClient struct {
	grpc.ClientStream
}

func (x *chatterEventsListenClientConnectClient) Recv() (*ClientConnectionEvent, error) {
	m := new(ClientConnectionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatterEventsClient) ListenClientDisconnect(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (ChatterEvents_ListenClientDisconnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatterEvents_serviceDesc.Streams[1], "/chatter.ChatterEvents/ListenClientDisconnect", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterEventsListenClientDisconnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatterEvents_ListenClientDisconnectClient interface {
	Recv() (*ClientConnectionEvent, error)
	grpc.ClientStream
}

type chatterEventsListenClientDisconnectClient struct {
	grpc.ClientStream
}

func (x *chatterEventsListenClientDisconnectClient) Recv() (*ClientConnectionEvent, error) {
	m := new(ClientConnectionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatterEventsClient) ListenClientMessage(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (ChatterEvents_ListenClientMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatterEvents_serviceDesc.Streams[2], "/chatter.ChatterEvents/ListenClientMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterEventsListenClientMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatterEvents_ListenClientMessageClient interface {
	Recv() (*ClientMessageEvent, error)
	grpc.ClientStream
}

type chatterEventsListenClientMessageClient struct {
	grpc.ClientStream
}

func (x *chatterEventsListenClientMessageClient) Recv() (*ClientMessageEvent, error) {
	m := new(ClientMessageEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatterEventsClient) ListenServerMessage(ctx context.Context, in *wrappers.UInt32Value, opts ...grpc.CallOption) (ChatterEvents_ListenServerMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatterEvents_serviceDesc.Streams[3], "/chatter.ChatterEvents/ListenServerMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatterEventsListenServerMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatterEvents_ListenServerMessageClient interface {
	Recv() (*ServerMessageEvent, error)
	grpc.ClientStream
}

type chatterEventsListenServerMessageClient struct {
	grpc.ClientStream
}

func (x *chatterEventsListenServerMessageClient) Recv() (*ServerMessageEvent, error) {
	m := new(ServerMessageEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatterEventsServer is the server API for ChatterEvents service.
type ChatterEventsServer interface {
	ListenClientConnect(*wrappers.UInt32Value, ChatterEvents_ListenClientConnectServer) error
	ListenClientDisconnect(*wrappers.UInt32Value, ChatterEvents_ListenClientDisconnectServer) error
	ListenClientMessage(*wrappers.UInt32Value, ChatterEvents_ListenClientMessageServer) error
	ListenServerMessage(*wrappers.UInt32Value, ChatterEvents_ListenServerMessageServer) error
}

// UnimplementedChatterEventsServer can be embedded to have forward compatible implementations.
type UnimplementedChatterEventsServer struct {
}

func (*UnimplementedChatterEventsServer) ListenClientConnect(req *wrappers.UInt32Value, srv ChatterEvents_ListenClientConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenClientConnect not implemented")
}
func (*UnimplementedChatterEventsServer) ListenClientDisconnect(req *wrappers.UInt32Value, srv ChatterEvents_ListenClientDisconnectServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenClientDisconnect not implemented")
}
func (*UnimplementedChatterEventsServer) ListenClientMessage(req *wrappers.UInt32Value, srv ChatterEvents_ListenClientMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenClientMessage not implemented")
}
func (*UnimplementedChatterEventsServer) ListenServerMessage(req *wrappers.UInt32Value, srv ChatterEvents_ListenServerMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenServerMessage not implemented")
}

func RegisterChatterEventsServer(s *grpc.Server, srv ChatterEventsServer) {
	s.RegisterService(&_ChatterEvents_serviceDesc, srv)
}

func _ChatterEvents_ListenClientConnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrappers.UInt32Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatterEventsServer).ListenClientConnect(m, &chatterEventsListenClientConnectServer{stream})
}

type ChatterEvents_ListenClientConnectServer interface {
	Send(*ClientConnectionEvent) error
	grpc.ServerStream
}

type chatterEventsListenClientConnectServer struct {
	grpc.ServerStream
}

func (x *chatterEventsListenClientConnectServer) Send(m *ClientConnectionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatterEvents_ListenClientDisconnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrappers.UInt32Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatterEventsServer).ListenClientDisconnect(m, &chatterEventsListenClientDisconnectServer{stream})
}

type ChatterEvents_ListenClientDisconnectServer interface {
	Send(*ClientConnectionEvent) error
	grpc.ServerStream
}

type chatterEventsListenClientDisconnectServer struct {
	grpc.ServerStream
}

func (x *chatterEventsListenClientDisconnectServer) Send(m *ClientConnectionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatterEvents_ListenClientMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrappers.UInt32Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatterEventsServer).ListenClientMessage(m, &chatterEventsListenClientMessageServer{stream})
}

type ChatterEvents_ListenClientMessageServer interface {
	Send(*ClientMessageEvent) error
	grpc.ServerStream
}

type chatterEventsListenClientMessageServer struct {
	grpc.ServerStream
}

func (x *chatterEventsListenClientMessageServer) Send(m *ClientMessageEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatterEvents_ListenServerMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrappers.UInt32Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatterEventsServer).ListenServerMessage(m, &chatterEventsListenServerMessageServer{stream})
}

type ChatterEvents_ListenServerMessageServer interface {
	Send(*ServerMessageEvent) error
	grpc.ServerStream
}

type chatterEventsListenServerMessageServer struct {
	grpc.ServerStream
}

func (x *chatterEventsListenServerMessageServer) Send(m *ServerMessageEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _ChatterEvents_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatter.ChatterEvents",
	HandlerType: (*ChatterEventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenClientConnect",
			Handler:       _ChatterEvents_ListenClientConnect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenClientDisconnect",
			Handler:       _ChatterEvents_ListenClientDisconnect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenClientMessage",
			Handler:       _ChatterEvents_ListenClientMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenServerMessage",
			Handler:       _ChatterEvents_ListenServerMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatter.proto",
}
